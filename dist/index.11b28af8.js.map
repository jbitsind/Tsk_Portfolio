{"mappings":"ACwMA,MAAM,EAAiB,IAAI,qBAAqB,AAAC,IAC7C,EAAQ,OAAO,CAAC,AAAA,IACZ,GAAI,EAAM,cAAc,CACpB,KArBe,MACnB,EADmB,EAqBG,EAAM,MAAM,CApBlC,EAAc,YAAY,KACtB,EAAQ,SAAS,CAAG,EAAQ,YAAY,EAAI,EAAQ,YAAY,CAChE,EAAQ,SAAS,CAAG,EAEpB,EAAQ,SAAS,EATT,CAWhB,EAVmB,IAWnB,WAAW,KACP,cAAc,EAClB,EAZuB,IAsBnB,CAGJ,EACJ,EAXwB,CACpB,KAAM,KACN,UAAW,EACf,GAWA,SAAS,gBAAgB,CAAC,uEACrB,OAAO,CAAC,AAAA,GAAM,EAAe,OAAO,CAAC,IAG9B,IAAI,MAAM,UAAW,CAC7B,QAAS,CAAC,4BAA6B,iBAAkB,oBAAqB,wBAAwB,CACtG,UAAW,IACX,UAAW,GACX,KAAM,CAAA,CACV,GAGA,MAAM,EAAc,SAAS,cAAc,CAAC,gBACxC,GACA,EAAY,gBAAgB,CAAC,SAAU,eAAe,CAAC,EACnD,EAAE,cAAc,GAChB,IAAM,EAAM,IAAI,CAAC,aAAa,CAAC,wBAC/B,CAAA,EAAI,QAAQ,CAAG,CAAA,EAEf,IAAM,EAAO,SAAS,aAAa,CAAC,2BAA2B,KAAK,CAC9D,EAAQ,SAAS,aAAa,CAAC,4BAA4B,KAAK,CAChE,EAAU,SAAS,aAAa,CAAC,yBAAyB,KAAK,CAC/D,EAAU,SAAS,aAAa,CAAC,4BAA4B,KAAK,CAExE,GAAI,CACA,IAAM,EAAM,MAAM,MAAM,6BAA8B,CAClD,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,CAAE,KAAA,EAAM,MAAA,EAAO,QAAA,EAAS,QAAA,CAAQ,EACzD,GACM,EAAO,MAAM,EAAI,IAAI,GAC3B,MAAM,GAEN,IAAI,CAAC,KAAK,EACd,CAAE,MAAO,EAAK,CACV,MAAM,0BACV,QAAU,CACN,EAAI,QAAQ,CAAG,CAAA,CACnB,CACJ,GAKJ,SAAS,gBAAgB,CAAC,kBAAkB,OAAO,CAAC,SAAS,CAAG,EAExD,EAAI,YAAY,CAAC,cACjB,EAAI,gBAAgB,CAAC,QAAS,SAAS,CAAC,EACpC,EAAE,cAAc,GAChB,IAAI,EAAY,EAAI,YAAY,CAAC,YAC7B,CAAA,GAAa,AAAc,SAAd,EACb,OAAO,QAAQ,CAAC,IAAI,CAAG,EAEvB,QAAQ,KAAK,CAAC,eAAgB,EAEtC,EAER,GAGA,MAAM,EAAW,SAAS,gBAAgB,CAAC,aACrC,EAAW,SAAS,gBAAgB,CAAC,WAErC,EAAkB,IAAI,qBAAqB,AAAC,IAC9C,EAAQ,OAAO,CAAC,AAAA,IACZ,GAAI,EAAM,cAAc,CAAE,CACtB,EAAS,OAAO,CAAC,AAAA,GAAQ,EAAK,SAAS,CAAC,MAAM,CAAC,WAC/C,IAAM,EAAK,EAAM,MAAM,CAAC,YAAY,CAAC,MAC/B,EAAa,SAAS,aAAa,CAAC,CAAC,iBAAiB,EAAE,EAAG,EAAE,CAAC,EAChE,GACA,EAAW,SAAS,CAAC,GAAG,CAAC,SAEjC,CACJ,EACJ,EAAG,CAAE,UAAW,EAAI,GAEpB,EAAS,OAAO,CAAC,AAAA,IACb,EAAgB,OAAO,CAAC,EAC5B,GAEA,EAAS,OAAO,CAAC,AAAA,IACb,EAAK,gBAAgB,CAAC,QAAS,SAAS,CAAC,EACrC,EAAE,cAAc,GAChB,IAAM,EAAW,IAAI,CAAC,YAAY,CAAC,QAC7B,EAAgB,SAAS,aAAa,CAAC,GACzC,GACA,EAAc,cAAc,CAAC,CAAE,SAAU,QAAS,EAE1D,EACJ","sources":["<anon>","src/js/scripts.js"],"sourcesContent":["// // document.addEventListener(\"DOMContentLoaded\", () => {\n// // Auto-scroll settings\n// const scrollSpeed = 1; // pixels per scroll increment\n// const scrollInterval = 50; // ms between each scroll increment\n// const autoScrollDuration = 20000; // total auto-scroll time in ms (20 seconds)\n// // Function to automatically scroll an element\n// function autoScrollElement(element) {\n//     let scrollTimer = setInterval(() => {\n//         // If the element is scrolled to the bottom, reset to top\n//         if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\n//             element.scrollTop = 0;\n//         } else {\n//             element.scrollTop += scrollSpeed;\n//         }\n//     }, scrollInterval);\n//     // Stop auto-scrolling after the designated duration\n//     setTimeout(() => {\n//         clearInterval(scrollTimer);\n//     }, autoScrollDuration);\n// }\n// // Observer options: trigger when 50% of the element is visible\n// const observerOptions = {\n//     root: null, // viewport\n//     threshold: 0.5\n// };\n// // Create the Intersection Observer\n// const observer = new IntersectionObserver((entries) => {\n//     entries.forEach(entry => {\n//         if (entry.isIntersecting) {\n//             autoScrollElement(entry.target);\n//         }\n//     });\n// }, observerOptions);\n// // Observe both Education and Experience sections\n// document.querySelectorAll('.about .about-content .education, .about .about-content .experience')\n//     .forEach(el => observer.observe(el));\n// /*==================================Typing Animation ==================================*/\n// var typed = new Typed(\".typing\", {\n//     strings: [\"Machine Learning Engineer\", \"Data Scientist\", \"Software Engineer\", \"Creative Technologist\"],\n//     typeSpeed: 150,\n//     backSpeed: 60,\n//     loop: true\n// });\n// /*====================== Message Sending =========================*/\n// const form = document.getElementById('contact-form');\n// form.addEventListener('submit', async function(e) {\n//     e.preventDefault();\n//     // Get the submit button and disable it to prevent multiple submissions\n//     const btn = this.querySelector('button[type=\"submit\"]');\n//     btn.disabled = true;\n//     // Read values from form inputs\n//     const name = document.querySelector('input[name=\"user_name\"]').value;\n//     const email = document.querySelector('input[name=\"user_email\"]').value;\n//     const subject = document.querySelector('input[name=\"subject\"]').value;\n//     const message = document.querySelector('textarea[name=\"message\"]').value;\n//     try {\n//         const res = await fetch(\"http://localhost:3000/send\", {\n//             method: \"POST\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify({ name, email, subject, message })\n//         });\n//         const text = await res.text();\n//         alert(text);\n//         // Clear the form inputs after a successful submission\n//         this.reset();\n//     } catch (err) {\n//         alert(\"Message failed to send.\");\n//     } finally {\n//         // Re-enable the button regardless of outcome\n//         btn.disabled = false;\n//     }\n// });\n// /*====================== Open modal when \"Read More\" button is clicked =========================*/\n// document.querySelectorAll('.read-more').forEach(function(button) {\n//     button.addEventListener('click', function(event) {\n//         event.preventDefault();\n//         var modalId = this.getAttribute('data-modal');\n//         document.getElementById(modalId).style.display = 'block';\n//     });\n// });\n// // Close modal when the close element is clicked\n// document.querySelectorAll('.modal .close').forEach(function(closeBtn) {\n//     closeBtn.addEventListener('click', function() {\n//         var modalId = this.getAttribute('data-modal');\n//         document.getElementById(modalId).style.display = 'none';\n//     });\n// });\n// // Optional: Close modal if user clicks outside the modal content\n// window.addEventListener('click', function(event) {\n//     document.querySelectorAll('.modal').forEach(function(modal) {\n//         if (event.target === modal) {\n//             modal.style.display = 'none';\n//         }\n//     });\n// });\n// /*====================== Smooth Scrolling =========================*/\n// document.addEventListener('DOMContentLoaded', function() {\n//     const navLinks = document.querySelectorAll('.nav li a');\n//     const sections = document.querySelectorAll('section');\n//     const options = {\n//         threshold: 0.5 // Trigger when 50% of the section is visible\n//     };\n//     const observer = new IntersectionObserver((entries, observer) => {\n//         entries.forEach(entry => {\n//             if (entry.isIntersecting) {\n//                 // Remove active class from all links\n//                 navLinks.forEach(link => link.classList.remove('active'));\n//                 // Get the ID of the visible section\n//                 const id = entry.target.getAttribute('id');\n//                 // Add active class to corresponding nav link\n//                 document.querySelector(`.nav li a[href=\"#${id}\"]`).classList.add('active');\n//             }\n//         });\n//     }, options);\n//     sections.forEach(section => {\n//         observer.observe(section);\n//     });\n// });\n// /*====================== Scroll to section on nav link click =========================*/\n// document.addEventListener(\"DOMContentLoaded\", function() {\n//     const sections = document.querySelectorAll(\"section\");\n//     const navLinks = document.querySelectorAll(\".nav li a\");\n//     window.addEventListener(\"scroll\", () => {\n//         let currentSection = \"\";\n//         sections.forEach(section => {\n//             const sectionTop = section.offsetTop;\n//             // Adjust 60 if needed to account for fixed header height\n//             if (pageYOffset >= sectionTop - 60) {\n//                 currentSection = section.getAttribute(\"id\");\n//             }\n//         });\n//         navLinks.forEach(link => {\n//             link.classList.remove(\"active\");\n//             if (link.getAttribute(\"href\") === \"#\" + currentSection) {\n//                 link.classList.add(\"active\");\n//             }\n//         });\n//     });\n// });\n// /*====================== Read More button redirection =========================*/\n// document.querySelectorAll('.btn.read-more').forEach(function(btn) {\n//     btn.addEventListener('click', function() {\n//         window.location.href = btn.getAttribute('data-link');\n//     });\n// });\n// /*======= Ensure every button has a valid data-link attribute =====*/\n// document.querySelectorAll('.btn.read-more').forEach(function(btn) {\n//     btn.addEventListener('click', function() {\n//         var targetUrl = btn.getAttribute('data-link');\n//         if (targetUrl && targetUrl !== \"null\") { // Check for valid URL\n//             window.location.href = targetUrl;\n//         } else {\n//             console.error('Invalid URL:', targetUrl);\n//         }\n//     });\n// });document.addEventListener(\"DOMContentLoaded\", function() {\n/*====================== Auto-scroll =========================*/ const scrollSpeed = 1; // pixels per scroll increment\nconst scrollInterval = 50; // ms between each scroll increment\nconst autoScrollDuration = 20000; // total auto-scroll time in ms (20 seconds)\nfunction autoScrollElement(element) {\n    let scrollTimer = setInterval(()=>{\n        if (element.scrollTop + element.clientHeight >= element.scrollHeight) element.scrollTop = 0;\n        else element.scrollTop += scrollSpeed;\n    }, scrollInterval);\n    setTimeout(()=>{\n        clearInterval(scrollTimer);\n    }, autoScrollDuration);\n}\nconst observerOptions = {\n    root: null,\n    threshold: 0.5 // Trigger when 50% of the element is visible\n};\nconst scrollObserver = new IntersectionObserver((entries)=>{\n    entries.forEach((entry)=>{\n        if (entry.isIntersecting) autoScrollElement(entry.target);\n    });\n}, observerOptions);\n// Observe the Education and Experience sections inside .about-content\ndocument.querySelectorAll('.about .about-content .education, .about .about-content .experience').forEach((el)=>scrollObserver.observe(el));\n/*====================== Typing Animation =========================*/ var typed = new Typed(\".typing\", {\n    strings: [\n        \"Machine Learning Engineer\",\n        \"Data Scientist\",\n        \"Software Engineer\",\n        \"Creative Technologist\"\n    ],\n    typeSpeed: 150,\n    backSpeed: 60,\n    loop: true\n});\n/*====================== Message Sending (Contact Form) =========================*/ const contactForm = document.getElementById('contact-form');\nif (contactForm) contactForm.addEventListener('submit', async function(e) {\n    e.preventDefault();\n    const btn = this.querySelector('button[type=\"submit\"]');\n    btn.disabled = true;\n    const name = document.querySelector('input[name=\"user_name\"]').value;\n    const email = document.querySelector('input[name=\"user_email\"]').value;\n    const subject = document.querySelector('input[name=\"subject\"]').value;\n    const message = document.querySelector('textarea[name=\"message\"]').value;\n    try {\n        const res = await fetch(\"http://localhost:3000/send\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                name,\n                email,\n                subject,\n                message\n            })\n        });\n        const text = await res.text();\n        alert(text);\n        // Clear the form upon successful submission\n        this.reset();\n    } catch (err) {\n        alert(\"Message failed to send.\");\n    } finally{\n        btn.disabled = false;\n    }\n});\n/*====================== Read More Button Redirection =========================*/ // Bind redirection only to buttons that have a valid data-link attribute.\ndocument.querySelectorAll('.btn.read-more').forEach(function(btn) {\n    // Make sure the button has a data-link attribute before adding an event listener.\n    if (btn.getAttribute('data-link')) btn.addEventListener('click', function(e) {\n        e.preventDefault();\n        var targetUrl = btn.getAttribute('data-link');\n        if (targetUrl && targetUrl !== \"null\") window.location.href = targetUrl;\n        else console.error('Invalid URL:', targetUrl);\n    });\n});\n/*====================== Smooth Scrolling & Active Navigation =========================*/ const navLinks = document.querySelectorAll('.nav li a');\nconst sections = document.querySelectorAll('section');\nconst sectionObserver = new IntersectionObserver((entries)=>{\n    entries.forEach((entry)=>{\n        if (entry.isIntersecting) {\n            navLinks.forEach((link)=>link.classList.remove('active'));\n            const id = entry.target.getAttribute('id');\n            const activeLink = document.querySelector(`.nav li a[href=\"#${id}\"]`);\n            if (activeLink) activeLink.classList.add('active');\n        }\n    });\n}, {\n    threshold: 0.5\n});\nsections.forEach((section)=>{\n    sectionObserver.observe(section);\n});\nnavLinks.forEach((link)=>{\n    link.addEventListener(\"click\", function(e) {\n        e.preventDefault();\n        const targetId = this.getAttribute(\"href\");\n        const targetSection = document.querySelector(targetId);\n        if (targetSection) targetSection.scrollIntoView({\n            behavior: \"smooth\"\n        });\n    });\n});\n\n//# sourceMappingURL=index.11b28af8.js.map\n","// // document.addEventListener(\"DOMContentLoaded\", () => {\r\n// // Auto-scroll settings\r\n// const scrollSpeed = 1; // pixels per scroll increment\r\n// const scrollInterval = 50; // ms between each scroll increment\r\n// const autoScrollDuration = 20000; // total auto-scroll time in ms (20 seconds)\r\n\r\n// // Function to automatically scroll an element\r\n// function autoScrollElement(element) {\r\n//     let scrollTimer = setInterval(() => {\r\n//         // If the element is scrolled to the bottom, reset to top\r\n//         if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\r\n//             element.scrollTop = 0;\r\n//         } else {\r\n//             element.scrollTop += scrollSpeed;\r\n//         }\r\n//     }, scrollInterval);\r\n\r\n//     // Stop auto-scrolling after the designated duration\r\n//     setTimeout(() => {\r\n//         clearInterval(scrollTimer);\r\n//     }, autoScrollDuration);\r\n// }\r\n\r\n// // Observer options: trigger when 50% of the element is visible\r\n// const observerOptions = {\r\n//     root: null, // viewport\r\n//     threshold: 0.5\r\n// };\r\n\r\n// // Create the Intersection Observer\r\n// const observer = new IntersectionObserver((entries) => {\r\n//     entries.forEach(entry => {\r\n//         if (entry.isIntersecting) {\r\n//             autoScrollElement(entry.target);\r\n//         }\r\n//     });\r\n// }, observerOptions);\r\n\r\n// // Observe both Education and Experience sections\r\n// document.querySelectorAll('.about .about-content .education, .about .about-content .experience')\r\n//     .forEach(el => observer.observe(el));\r\n\r\n// /*==================================Typing Animation ==================================*/\r\n// var typed = new Typed(\".typing\", {\r\n//     strings: [\"Machine Learning Engineer\", \"Data Scientist\", \"Software Engineer\", \"Creative Technologist\"],\r\n//     typeSpeed: 150,\r\n//     backSpeed: 60,\r\n//     loop: true\r\n// });\r\n\r\n\r\n// /*====================== Message Sending =========================*/\r\n// const form = document.getElementById('contact-form');\r\n// form.addEventListener('submit', async function(e) {\r\n//     e.preventDefault();\r\n\r\n//     // Get the submit button and disable it to prevent multiple submissions\r\n//     const btn = this.querySelector('button[type=\"submit\"]');\r\n//     btn.disabled = true;\r\n\r\n//     // Read values from form inputs\r\n//     const name = document.querySelector('input[name=\"user_name\"]').value;\r\n//     const email = document.querySelector('input[name=\"user_email\"]').value;\r\n//     const subject = document.querySelector('input[name=\"subject\"]').value;\r\n//     const message = document.querySelector('textarea[name=\"message\"]').value;\r\n\r\n//     try {\r\n//         const res = await fetch(\"http://localhost:3000/send\", {\r\n//             method: \"POST\",\r\n//             headers: { \"Content-Type\": \"application/json\" },\r\n//             body: JSON.stringify({ name, email, subject, message })\r\n//         });\r\n//         const text = await res.text();\r\n//         alert(text);\r\n\r\n//         // Clear the form inputs after a successful submission\r\n//         this.reset();\r\n//     } catch (err) {\r\n//         alert(\"Message failed to send.\");\r\n//     } finally {\r\n//         // Re-enable the button regardless of outcome\r\n//         btn.disabled = false;\r\n//     }\r\n// });\r\n\r\n\r\n// /*====================== Open modal when \"Read More\" button is clicked =========================*/\r\n// document.querySelectorAll('.read-more').forEach(function(button) {\r\n//     button.addEventListener('click', function(event) {\r\n//         event.preventDefault();\r\n//         var modalId = this.getAttribute('data-modal');\r\n//         document.getElementById(modalId).style.display = 'block';\r\n//     });\r\n// });\r\n\r\n// // Close modal when the close element is clicked\r\n// document.querySelectorAll('.modal .close').forEach(function(closeBtn) {\r\n//     closeBtn.addEventListener('click', function() {\r\n//         var modalId = this.getAttribute('data-modal');\r\n//         document.getElementById(modalId).style.display = 'none';\r\n//     });\r\n// });\r\n\r\n// // Optional: Close modal if user clicks outside the modal content\r\n// window.addEventListener('click', function(event) {\r\n//     document.querySelectorAll('.modal').forEach(function(modal) {\r\n//         if (event.target === modal) {\r\n//             modal.style.display = 'none';\r\n//         }\r\n//     });\r\n// });\r\n\r\n// /*====================== Smooth Scrolling =========================*/\r\n// document.addEventListener('DOMContentLoaded', function() {\r\n//     const navLinks = document.querySelectorAll('.nav li a');\r\n//     const sections = document.querySelectorAll('section');\r\n\r\n//     const options = {\r\n//         threshold: 0.5 // Trigger when 50% of the section is visible\r\n//     };\r\n\r\n//     const observer = new IntersectionObserver((entries, observer) => {\r\n//         entries.forEach(entry => {\r\n//             if (entry.isIntersecting) {\r\n//                 // Remove active class from all links\r\n//                 navLinks.forEach(link => link.classList.remove('active'));\r\n//                 // Get the ID of the visible section\r\n//                 const id = entry.target.getAttribute('id');\r\n//                 // Add active class to corresponding nav link\r\n//                 document.querySelector(`.nav li a[href=\"#${id}\"]`).classList.add('active');\r\n//             }\r\n//         });\r\n//     }, options);\r\n\r\n//     sections.forEach(section => {\r\n//         observer.observe(section);\r\n//     });\r\n// });\r\n// /*====================== Scroll to section on nav link click =========================*/\r\n// document.addEventListener(\"DOMContentLoaded\", function() {\r\n//     const sections = document.querySelectorAll(\"section\");\r\n//     const navLinks = document.querySelectorAll(\".nav li a\");\r\n\r\n//     window.addEventListener(\"scroll\", () => {\r\n//         let currentSection = \"\";\r\n//         sections.forEach(section => {\r\n//             const sectionTop = section.offsetTop;\r\n//             // Adjust 60 if needed to account for fixed header height\r\n//             if (pageYOffset >= sectionTop - 60) {\r\n//                 currentSection = section.getAttribute(\"id\");\r\n//             }\r\n//         });\r\n//         navLinks.forEach(link => {\r\n//             link.classList.remove(\"active\");\r\n//             if (link.getAttribute(\"href\") === \"#\" + currentSection) {\r\n//                 link.classList.add(\"active\");\r\n//             }\r\n//         });\r\n//     });\r\n// });\r\n// /*====================== Read More button redirection =========================*/\r\n// document.querySelectorAll('.btn.read-more').forEach(function(btn) {\r\n//     btn.addEventListener('click', function() {\r\n//         window.location.href = btn.getAttribute('data-link');\r\n//     });\r\n// });\r\n// /*======= Ensure every button has a valid data-link attribute =====*/\r\n// document.querySelectorAll('.btn.read-more').forEach(function(btn) {\r\n//     btn.addEventListener('click', function() {\r\n//         var targetUrl = btn.getAttribute('data-link');\r\n//         if (targetUrl && targetUrl !== \"null\") { // Check for valid URL\r\n//             window.location.href = targetUrl;\r\n//         } else {\r\n//             console.error('Invalid URL:', targetUrl);\r\n//         }\r\n//     });\r\n// });document.addEventListener(\"DOMContentLoaded\", function() {\r\n/*====================== Auto-scroll =========================*/\r\nconst scrollSpeed = 1; // pixels per scroll increment\r\nconst scrollInterval = 50; // ms between each scroll increment\r\nconst autoScrollDuration = 20000; // total auto-scroll time in ms (20 seconds)\r\n\r\nfunction autoScrollElement(element) {\r\n    let scrollTimer = setInterval(() => {\r\n        if (element.scrollTop + element.clientHeight >= element.scrollHeight) {\r\n            element.scrollTop = 0;\r\n        } else {\r\n            element.scrollTop += scrollSpeed;\r\n        }\r\n    }, scrollInterval);\r\n    setTimeout(() => {\r\n        clearInterval(scrollTimer);\r\n    }, autoScrollDuration);\r\n}\r\n\r\nconst observerOptions = {\r\n    root: null,\r\n    threshold: 0.5 // Trigger when 50% of the element is visible\r\n};\r\n\r\nconst scrollObserver = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n            autoScrollElement(entry.target);\r\n        }\r\n    });\r\n}, observerOptions);\r\n\r\n// Observe the Education and Experience sections inside .about-content\r\ndocument.querySelectorAll('.about .about-content .education, .about .about-content .experience')\r\n    .forEach(el => scrollObserver.observe(el));\r\n\r\n/*====================== Typing Animation =========================*/\r\nvar typed = new Typed(\".typing\", {\r\n    strings: [\"Machine Learning Engineer\", \"Data Scientist\", \"Software Engineer\", \"Creative Technologist\"],\r\n    typeSpeed: 150,\r\n    backSpeed: 60,\r\n    loop: true\r\n});\r\n\r\n/*====================== Message Sending (Contact Form) =========================*/\r\nconst contactForm = document.getElementById('contact-form');\r\nif (contactForm) {\r\n    contactForm.addEventListener('submit', async function(e) {\r\n        e.preventDefault();\r\n        const btn = this.querySelector('button[type=\"submit\"]');\r\n        btn.disabled = true;\r\n\r\n        const name = document.querySelector('input[name=\"user_name\"]').value;\r\n        const email = document.querySelector('input[name=\"user_email\"]').value;\r\n        const subject = document.querySelector('input[name=\"subject\"]').value;\r\n        const message = document.querySelector('textarea[name=\"message\"]').value;\r\n\r\n        try {\r\n            const res = await fetch(\"http://localhost:3000/send\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ name, email, subject, message })\r\n            });\r\n            const text = await res.text();\r\n            alert(text);\r\n            // Clear the form upon successful submission\r\n            this.reset();\r\n        } catch (err) {\r\n            alert(\"Message failed to send.\");\r\n        } finally {\r\n            btn.disabled = false;\r\n        }\r\n    });\r\n}\r\n\r\n/*====================== Read More Button Redirection =========================*/\r\n// Bind redirection only to buttons that have a valid data-link attribute.\r\ndocument.querySelectorAll('.btn.read-more').forEach(function(btn) {\r\n    // Make sure the button has a data-link attribute before adding an event listener.\r\n    if (btn.getAttribute('data-link')) {\r\n        btn.addEventListener('click', function(e) {\r\n            e.preventDefault();\r\n            var targetUrl = btn.getAttribute('data-link');\r\n            if (targetUrl && targetUrl !== \"null\") {\r\n                window.location.href = targetUrl;\r\n            } else {\r\n                console.error('Invalid URL:', targetUrl);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n/*====================== Smooth Scrolling & Active Navigation =========================*/\r\nconst navLinks = document.querySelectorAll('.nav li a');\r\nconst sections = document.querySelectorAll('section');\r\n\r\nconst sectionObserver = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n            navLinks.forEach(link => link.classList.remove('active'));\r\n            const id = entry.target.getAttribute('id');\r\n            const activeLink = document.querySelector(`.nav li a[href=\"#${id}\"]`);\r\n            if (activeLink) {\r\n                activeLink.classList.add('active');\r\n            }\r\n        }\r\n    });\r\n}, { threshold: 0.5 });\r\n\r\nsections.forEach(section => {\r\n    sectionObserver.observe(section);\r\n});\r\n\r\nnavLinks.forEach(link => {\r\n    link.addEventListener(\"click\", function(e) {\r\n        e.preventDefault();\r\n        const targetId = this.getAttribute(\"href\");\r\n        const targetSection = document.querySelector(targetId);\r\n        if (targetSection) {\r\n            targetSection.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    });\r\n});"],"names":["scrollObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","autoScrollElement","element","scrollTimer","target","setInterval","scrollTop","clientHeight","scrollHeight","setTimeout","clearInterval","root","threshold","document","querySelectorAll","el","observe","Typed","strings","typeSpeed","backSpeed","loop","contactForm","getElementById","addEventListener","e","preventDefault","btn","querySelector","disabled","name","value","email","subject","message","res","fetch","method","headers","body","JSON","stringify","text","alert","reset","err","getAttribute","targetUrl","window","location","href","console","error","navLinks","sections","sectionObserver","link","classList","remove","id","activeLink","add","section","targetId","targetSection","scrollIntoView","behavior"],"version":3,"file":"index.11b28af8.js.map"}